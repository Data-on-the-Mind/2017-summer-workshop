x
x <- array(1:12, dim = c(2,2, 3))
x
dim(x)
dim(x) <- c(6,2)
x
x <- array(1:12, dim = c(2,2, 3))
x
dim(x)
dim(x) <- c(6,2)
x
?aperm
require(rstan)
?stan_model
?log_prob
library(rstan)
# model
stancode <- 'data {
int<lower=1> N; // number of observations
vector[N] y; // observations
}
parameters {
real<lower=0> sigma2;
}
model {
target += cauchy_lpdf(sigma2 | 1, 1);
target += normal_lpdf(y | 0, sqrt(sigma2));
}
'
stanmodel <- stan_model(model_code = stancode, model_name="stanmodel")
set.seed(1)
N <- 5
sigma2_gen <- 1
stanobject <- sampling(stanmodel, data = list(y = y, N = N),
iter = 50000, warmup = 1000, chains = 4)
y <- rnorm(N, sd = sqrt(sigma2_gen))
stanobject <- sampling(stanmodel, data = list(y = y, N = N),
iter = 50000, warmup = 1000, chains = 4)
pars <- extract(object = stanobject, par = c("sigma2", "lp__"))
hist(pars$sigma2)
log_dnorm_c <- function(x, sigma2) {
-.5*log(2*pi*sigma2) - .5*x^2/sigma2
}
log_dnorm_c(.2, .3)
dnorm(.2, sd = sqrt(.3), log = TRUE)
log_dnorm_no_c <- function(x, sigma2) {
- .5*x^2/sigma2
}
log(dcauchy(.2, 1, 1))
log_target_Jc <- function(sigma2_t, y) {
sum(dnorm(y, 0, sqrt(exp(sigma2_t)), log = TRUE)) +
dcauchy(exp(sigma2_t), 1, 1, log = TRUE)-pcauchy(0, 1, 1, lower.tail = FALSE, log.p = TRUE) + sigma2_t
}
log_target_Jc(sigma2_t[1], y)
sigma2_t <- log(pars$sigma2)
log_target_Jc(sigma2_t[1], y)
pars$lp__[1]
log_target_Jc2 <- function(sigma2_t, y) {
sum(dnorm(y, 0, sqrt(exp(sigma2_t)), log = TRUE)) +
dcauchy(exp(sigma2_t), 1, 1, log = TRUE) + sigma2_t
}
log_target_Jc2(sigma2_t[1], y)
stancode <- 'data {
int<lower=1> N; // number of observations
vector[N] y; // observations
}
parameters {
real<lower=0> sigma2;
}
model {
target += cauchy_lpdf(sigma2 | 1, 1) - cauchy_lccdf(0 | 1, 1);
target += normal_lpdf(y | 0, sqrt(sigma2));
}
'
stanmodel <- stan_model(model_code = stancode, model_name="stanmodel")
stanobject <- sampling(stanmodel, data = list(y = y, N = N),
iter = 50000, warmup = 1000, chains = 4)
pars <- extract(object = stanobject, par = c("sigma2", "lp__"))
hist(pars$sigma2)
log_target_Jc(sigma2_t[1], y)
pars$lp__[1]
sigma2_t <- log(pars$sigma2)
pars <- extract(object = stanobject, par = c("sigma2", "lp__"))
hist(pars$sigma2)
sigma2_t <- log(pars$sigma2)
log_target_Jc(sigma2_t[1], y)
pars$lp__[1]
pars$lp__[1]
log_target_c(pars$sigma2[1], y)
sigma2_t <- log(pars$sigma2)
pars$lp__[1]
sigma2_t <- log(pars$sigma2)
log_target_Jc(sigma2_t[1], y)
log_target_Jc2(sigma2_t[1], y)
log_prob(stanmodel, sigma2_t[1])
stanfit2 <- stan(fit = stanmodel)
stanmodel
stanfit2 <- sampling(stanmodel, chains = 0)
log_prob(stanmodel, sigma2_t[1])
log_prob(stanfit2, sigma2_t[1])
str(stanmodel)
data <- list("dependent" = rnorm(100), "RM Factor 1" = factor(rep(c("Level 1", "Level 2"), 50)), "subject" = factor(rep(1:50, each = 2)))
attr(data, 'row.names') <- seq_len(length(data[[1]]))
attr(data, 'class') <- 'data.frame'
formula <- as.formula("dependent ~ `RM Factor 1` + Error(subject/(`RM Factor 1`))")
str(aov(formula, data))
str(aov(formula, data), 1)
install.packages("bridgesampling")
citation("bridgesampling)")
citation("bridgesampling")
devtools::install_github("quentingronau/bridgesampling@master")
citation("bridgesampling")
help(package = "loo")
require(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
require(rstanarm)
?stan_aov
(fit <- stan_lm(mpg ~ wt + qsec + am, data = mtcars, prior = R2(0.75),
# the next line is only to make the example go fast enough
chains = 1, iter = 500, seed = 12345))
waic(fit)
print(waic(fit))
print(waic(fit))
help(package = "afex")
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
options(width=120)
m2 <- lm(ACT ~ SATQ * gender, sat.act)
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
options(width=120)
require(psych)
data(sat.act)
sat.act$gender <- factor(sat.act$gender, 1:2, labels = c("male", "female"))
sat.act$education <- factor(sat.act$education)
summary(sat.act) # alternatively: psych::describe(sat.act)
par(mfrow=c(1,2))
plot(sat.act$SATV, sat.act$ACT)
plot(sat.act$SATQ, sat.act$ACT)
m1 <- lm(ACT ~ SATQ, sat.act)
summary(m1)
coef(m1)
plot(sat.act$SATV, sat.act$ACT)
abline(m1)
str(sat.act)
m2 <- lm(ACT ~ SATQ + gender, sat.act)
m2 <- lm(ACT ~ SATQ * gender, sat.act)
m2 <- lm(ACT ~ SATQ * gender, sat.act)
m2
summary(m2)
m2 <- lm(ACT ~ SATV * gender, sat.act)
summary(m2)
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
# see:
# https://github.com/yihui/xaringan/wiki
# https://github.com/gnab/remark/wiki/Markdown
options(width=120)
options(digits = 4)
data(sat.act)
require(psych)
data(sat.act)
sat.act$gender <- factor(sat.act$gender, 1:2, labels = c("male", "female"))
sat.act$education <- factor(sat.act$education)
summary(sat.act) # alternatively: psych::describe(sat.act)
sat.act <- na.omit(sat.act)
summary(sat.act)
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
# see:
# https://github.com/yihui/xaringan/wiki
# https://github.com/gnab/remark/wiki/Markdown
options(width=120)
options(digits = 4)
require(psych)
data(sat.act)
sat.act$gender <- factor(sat.act$gender, 1:2, labels = c("male", "female"))
sat.act$education <- factor(sat.act$education)
summary(sat.act) # alternatively: psych::describe(sat.act)
sat.act <- na.omit(sat.act)
par(mfrow=c(1,2))
plot(sat.act$SATV, sat.act$ACT)
plot(sat.act$SATQ, sat.act$ACT)
m1 <- lm(ACT ~ SATQ, sat.act)
summary(m1)
coef(m1)
plot(sat.act$SATV, sat.act$ACT)
abline(m1)
sat.act$SATQ <- sat.act$SATQ - mean(sat.act$SATQ, na.rm = TRUE)
sat.act$SATV <- sat.act$SATV - mean(sat.act$SATV)
m2 <- lm(ACT ~ SATQ, sat.act)
summary(m2)
coef(m2)
plot(sat.act$SATV, sat.act$ACT)
abline(m2)
coef(lm(ACT ~ SATQ + SATV, sat.act))   # a
coef(lm(ACT ~ SATQ : SATV, sat.act))   # b
coef(lm(ACT ~ 0 + SATQ:SATV, sat.act)) # c
coef(lm(ACT ~ SATQ*SATV, sat.act))     # d
coef(lm(ACT ~ 0+SATQ*SATV, sat.act))   # e
str(sat.act)
m2a <- lm(ACT ~ SATV + gender, sat.act)
m2b <- lm(ACT ~ SATV * gender, sat.act)
op <- options(width = 40)
coef(m2a)
coef(m2b)
mean(sat.act$ACT)
mean(sat.act[sat.act$gender == "male","ACT"])
options(op)
aggregate(ACT ~ gender, sat.act, mean)
prop.table(table(sat.act$gender))
28.73858 -0.30114
coef(lm(ACT ~ gender, sat.act))
mean(sat.act[sat.act$gender == "male","SATV"])
mean(sat.act[sat.act$gender == "female","SATV"])
str(sat.act)
install.packages("acss")
help(package = "acss")
options(htmltools.dir.version = FALSE)
# see: https://github.com/yihui/xaringan
# install.packages("xaringan")
# see:
# https://github.com/yihui/xaringan/wiki
# https://github.com/gnab/remark/wiki/Markdown
options(width=110)
options(digits = 4)
require(psych)
data(sat.act)
sat.act$gender <- factor(sat.act$gender, 1:2, labels = c("male", "female"))
sat.act$education <- factor(sat.act$education)
summary(sat.act) # alternatively: psych::describe(sat.act)
sat.act <- na.omit(sat.act)
par(mfrow=c(1,2))
plot(sat.act$SATV, sat.act$ACT)
plot(sat.act$SATQ, sat.act$ACT)
m1 <- lm(ACT ~ SATQ, sat.act)
summary(m1)
coef(m1)
plot(sat.act$SATV, sat.act$ACT)
abline(m1)
sat.act$SATQ_c <- sat.act$SATQ - mean(sat.act$SATQ, na.rm = TRUE)
sat.act$SATV_c <- sat.act$SATV - mean(sat.act$SATV)
m2 <- lm(ACT ~ SATQ_c, sat.act)
summary(m2)
coef(m2)
plot(sat.act$SATV_c, sat.act$ACT)
abline(m2)
coef(lm(ACT ~ SATQ_c + SATV_c, sat.act))   # a
coef(lm(ACT ~ SATQ_c : SATV_c, sat.act))   # b
coef(lm(ACT ~ 0 + SATQ_c:SATV_c, sat.act)) # c
coef(lm(ACT ~ SATQ_c*SATV_c, sat.act))     # d
coef(lm(ACT ~ 0+SATQ_c*SATV_c, sat.act))   # e
str(sat.act)
m3 <- lm(ACT ~ gender, sat.act)
summary(m3)
op <- options(width = 40)
mean(sat.act$ACT)
aggregate(ACT ~ gender, sat.act,
mean)
diff(aggregate(ACT ~ gender,
sat.act,
mean)$ACT)
options(op)
model.matrix(ACT ~ gender, sat.act[1:5,])
model.matrix(ACT ~ gender, sat.act[1:5,])
afex::set_sum_contrasts()
model.matrix(ACT ~ gender, sat.act[1:5,])
m4 <- lm(ACT ~ gender, sat.act)
summary(m4)
op <- options(width = 40)
mean(sat.act$ACT)
aggregate(ACT ~ gender, sat.act,
mean)
mean(aggregate(ACT ~ gender,
sat.act,
mean)$ACT)
options(op)
afex::set_default_contrasts() # or set_treatment_contrasts()
op <- options(width = 70)
m5 <- lm(ACT ~ gender*education, sat.act)
coef(m5)
aggregate(ACT ~ gender+education,
sat.act, mean)
options(op)
afex::set_sum_contrasts() # or set_effects_contrasts() or set_deviation_contrasts()
op <- options(width = 70)
m6 <- lm(ACT ~ gender*education, sat.act)
coef(m6)
mean(
aggregate(ACT ~
gender+education,
sat.act, mean)$ACT)
options(op)
levels(sat.act$gender)
levels(sat.act$education)
coef(lm(ACT ~ gender, sat.act))                  # a: 2
coef(lm(ACT ~ 0+gender, sat.act))                # b: 2
coef(lm(ACT ~ gender+education, sat.act))        # c: 7
coef(lm(ACT ~ 0+gender+education, sat.act))      # d: 7
coef(lm(ACT ~ gender:education, sat.act))        # e: 13
coef(lm(ACT ~ 0+gender:education, sat.act))      # f: 12
op <- options(width = 70)
afex::set_sum_contrasts()
m6 <- lm(ACT ~ gender*education, sat.act)
summary(m6)$coefficients
summary(m6)
?print
m6Out <- capture.output(summary(m6))
m6Out
m6Out <- capture.output(summary(m6))
options(op)
citation("car")
require(lsmeans)
lsmeans(m6, "education", contr = "pairwise")
require(lsmeans)
lsmeans(m6, "education")
pairs(lsmeans(m6, "education"))
summary(pairs(lsmeans(m6, "education")), adjust='holm')
?car
?rlm
?plor
?polr
?coxph
?coxme
??coxme
?lme
?ordinal
lsmeans(m6, ~education)
lsmeans(m6, ~education+gender)
lsmeans(m6, ~education*gender)
citation("lsmeans")
data("sk2011.2")
library(afex)
data("sk2011.2")
sk2_aff <- droplevels(sk2011.2[sk2011.2$what == "affirmation",])
sk_m3 <- mixed(response ~ instruction * inference * type + (0 + inference | id), sk2_aff,
expand_re = TRUE) # runs just fine
all_fit(sk_m3$full_model, data=sk_m3$data)
sk_m3b <- mixed(response ~ instruction * inference * type + (0 + inference | id), sk2_aff,
expand_re = TRUE, all_fit = TRUE)
require(optimx)
install.packages("optimx")
require(dfoptim)
sk_m3b <- mixed(response ~ instruction * inference * type + (0 + inference | id), sk2_aff,
expand_re = TRUE, all_fit = TRUE)
sk_m3b
attr(sk_m3b, "all_fit_selected")
attr(sk_m3b, "all_fit_logLik")
require(optimx)
sk_m3b <- mixed(response ~ instruction * inference * type + (0 + inference | id), sk2_aff,
expand_re = TRUE, all_fit = TRUE)
attr(sk_m3b, "all_fit_selected")
attr(sk_m3b, "all_fit_logLik")
update.packages(ask = FALSE)
require(lsmeans)
require(lme4)
require(lsmeans)
install.packages("afex", dependencies = TRUE)
require(lsmeans)
require(lme4)
sleep2 <- sleepstudy
sleep2$Days <- sleep2$Days
fm1 <- lmer(Reaction ~ Days + (Days2 | Subject), sleep2)
sleep2$Days2 <- sleep2$Days
fm1 <- lmer(Reaction ~ Days + (Days2 | Subject), sleep2)
lsmeans(fm1, "Days")
rm(sleep2)
lsmeans(fm1, "Days")
lsmeans(fm1, "Days", data=sleepstudy)
sleep2 <- sleepstudy
sleep2$Days2 <- sleep2$Days
sleep3 <- sleep2
rm(sleep2)
lsmeans(fm1, "Days", data=sleepstudy)
lsmeans(fm1, "Days", data=sleep3)
fm1@call[["data"]]
fm1@call[["data"]] <- as.name("sleep3")
lsmeans(fm1, "Days")
sleep2 <- sleepstudy
sleep2$Days2 <- sleep2$Days
sleep2$Days2 <- NULL
lsmeans(fm1, "Days")
require(lsmeans)
require(lme4)
sleep2 <- sleepstudy
sleep2$Days2 <- sleep2$Days
sleep3 <- sleep2
fm1 <- lmer(Reaction ~ Days + (Days2 | Subject), sleep2)
lsmeans(fm1, "Days")
sleep2$Days2 <- NULL
lsmeans(fm1, "Days")
lsmeans(fm1, "Days", data=sleepstudy)
lsmeans(fm1, "Days", data=sleep3)
fm1@call[["data"]] <- as.name("sleep3")
lsmeans(fm1, "Days")
lsmeans:::lsm.basis.merMod
1239 / 465
2464/2.66
setwd("~/GitHub/2017-summer-workshop/singmann-statistical-modeling-in-r/exercises")
load("ssk16_dat_online.rda") # data comes in 4 data frames per
dw_1$dv_question <- "probability"
dw_2$dv_question <- "acceptability"
dw_3$dv_question <- "probability"
dw_4$dv_question <- "acceptability"
dw_1$conditional <- "indicative"
dw_2$conditional <- "indicative"
dw_3$conditional <- "concessive"
dw_4$conditional <- "concessive"
dw_1$lfdn <- factor(paste(as.character(dw_1$lfdn), "P(if,then)", sep ="_"))
dw_2$lfdn <- factor(paste(as.character(dw_2$lfdn), "Acc(if,then)", sep ="_"))
dw_3$lfdn <- factor(paste(as.character(dw_3$lfdn), "P(Even)", sep ="_"))
dw_4$lfdn <- factor(paste(as.character(dw_4$lfdn), "Acc(Even)", sep ="_"))
names(dw_1)[names(dw_1) == 'P'] <- 'DV'
names(dw_2)[names(dw_2) == 'ACC'] <- 'DV'
names(dw_3)[names(dw_3) == 'PEven'] <- 'DV'
names(dw_4)[names(dw_4) == 'ACCEven'] <- 'DV'
dw <- rbind(dw_1, dw_2, dw_3, dw_4)
# center IVs and DV at midpoint of scale
dat <- within(dw, {
b_given_a <- (CgivenA-50)/100
dv <- (DV-50)/100
#group <- factor(group, levels = c("P(if,then)", "Acc(if,then)", "P(Even)", "Acc(Even)"))
dv_question <- factor(dv_question, levels = c("probability", "acceptability"))
conditional <- factor(conditional, levels = c("indicative", "concessive"))
})
dat$AC <- NULL
dat$conclusion <- NULL
dat <- dplyr::rename(dat, BgivenA = BgivenA)
dat <- dplyr::rename(dat, BgivenA = CgivenA)
load("ssk16_dat_online.rda") # data comes in 4 data frames per
# dw_1$group <-"P(if,then)"
# dw_2$group <-"Acc(if,then)"
# dw_3$group <-"P(Even)"
# dw_4$group <-"Acc(Even)"
dw_1$dv_question <- "probability"
dw_2$dv_question <- "acceptability"
dw_3$dv_question <- "probability"
dw_4$dv_question <- "acceptability"
dw_1$conditional <- "indicative"
dw_2$conditional <- "indicative"
dw_3$conditional <- "concessive"
dw_4$conditional <- "concessive"
dw_1$lfdn <- factor(paste(as.character(dw_1$lfdn), "P(if,then)", sep ="_"))
dw_2$lfdn <- factor(paste(as.character(dw_2$lfdn), "Acc(if,then)", sep ="_"))
dw_3$lfdn <- factor(paste(as.character(dw_3$lfdn), "P(Even)", sep ="_"))
dw_4$lfdn <- factor(paste(as.character(dw_4$lfdn), "Acc(Even)", sep ="_"))
names(dw_1)[names(dw_1) == 'P'] <- 'DV'
names(dw_2)[names(dw_2) == 'ACC'] <- 'DV'
names(dw_3)[names(dw_3) == 'PEven'] <- 'DV'
names(dw_4)[names(dw_4) == 'ACCEven'] <- 'DV'
dw <- rbind(dw_1, dw_2, dw_3, dw_4)
# center IVs and DV at midpoint of scale
dat <- within(dw, {
c_given_a <- (CgivenA-50)/100
dv <- (DV-50)/100
#group <- factor(group, levels = c("P(if,then)", "Acc(if,then)", "P(Even)", "Acc(Even)"))
dv_question <- factor(dv_question, levels = c("probability", "acceptability"))
conditional <- factor(conditional, levels = c("indicative", "concessive"))
})
dat$AC <- NULL
dat$conclusion <- NULL
dat <- droplevels(dat[ dat$conditional == "indicative", ])
dat$conditional <- NULL
dat$type <- NULL
save(dat, file="ssk16_dat_preapred.rda")
length(levels(dat$lfdn))
require(dplyr)
require(tidyr)
require(ggplot2)
require(broom)
# Run complete chunk: Ctrl+Shift+Enter
# You might need to set the correct working directory via the menu:
# Session - Set Working Directory - To Source File Location
afex::set_sum_contrasts() # just in case we set orthogonal contrasts
load("ssk16_dat_preapred.rda") # data preapred in 'prepare_data.R'
str(dat)
m0 <- lm(dv~c_given_a, dat)
summary(m0)
ggplot(data = dat) +
geom_point(mapping = aes(x = CgivenA, y = DV), alpha = 0.2, pch = 16) +
facet_grid(conditional+dv_question ~ rel_cond) +
coord_fixed()
ggplot(data = dat) +
geom_point(mapping = aes(x = CgivenA, y = DV), alpha = 0.2, pch = 16) +
facet_grid(dv_question ~ rel_cond) +
coord_fixed()
ggplot(data = dat) +
geom_point(mapping = aes(x = CgivenA, y = DV), alpha = 0.2, pch = 16) +
facet_grid(dv_question ~ rel_cond) +
coord_fixed()
require(dplyr)
require(tidyr)
require(ggplot2)
require(broom)
# Run complete chunk: Ctrl+Shift+Enter
# You might need to set the correct working directory via the menu:
# Session - Set Working Directory - To Source File Location
afex::set_sum_contrasts() # just in case we set orthogonal contrasts
load("ssk16_dat_preapred.rda") # data preapred in 'prepare_data.R'
str(dat)
m0 <- lm(dv~c_given_a, dat)
summary(m0)
ggplot(data = dat) +
geom_point(mapping = aes(x = CgivenA, y = DV), alpha = 0.2, pch = 16) +
facet_grid(dv_question ~ rel_cond) +
coord_fixed()
# go
